#!/usr/bin/env bash

# Git Monitor
# Based on git-sync by Simon Thum (Add URL here)
# And the following:
# Took this from: https://github.com/ivanmalison/dotfiles/blob/3a0c142760a930fd41441a645d78ec2a83bf7811/dotfiles/lib/bin/git_sync_directory.sh#L8
# But the fswatch part from: https://github.com/gitwatch/gitwatch/blob/master/gitwatch.sh
# TODO add my own license

# NB we don't care about branches etc.
# We simply sync the current branch with upstream
# Any complication on git status? Just don't do anything

# Requirements: bash; git; coreutils and fswatch on Mac OS

declare -r TIMEOUT=60
# shellcheck disable=SC2155
declare -r SYSTEM="$(uname)"

msg() # log message with date
{
    printf "git-monitor (%s): %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$*"
}


warn()
{
    # log message and show it as a system notification
    msg "$*"
    if [[ $SYSTEM = Darwin ]]; then
        osascript -e "display notification \"git-monitor: $*\"" 2> /dev/null
    else
        notify-send "git-monitor: $*" 2> /dev/null
    fi
}

error_nowarn() {
    # Log an error and exit but don't show system notification
    # First argument: error code
    # All others are logged
    retval="$1"
    shift
    printf "git-monitor error: %s\n" "$*" >&2; exit "$retval";
}


error() {
    # Log an error and exit
    # First argument: error code
    # All others are logged
    retval="$1"
    shift
    warn "Error: $*"
    error_nowarn "$retval" "$*"
}


wait_for_change() {
    # Wait for $TIMEOUT seconds for a change
    if [[ $SYSTEM != "Darwin" ]]; then
        inotifywait . -r -e modify,move,create,delete --format "%w%f" --exclude "\.git" -t "$TIMEOUT"
    else
        # default events specified via a mask, see
        # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
        # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
        #                = 256 + 128+ 16 + 8 + 4 + 2
        gtimeout "$TIMEOUT" fswatch --recursive --event=414 --exclude "\.git"  -1 .
    fi
}


get_git_dir() { git rev-parse --git-dir 2>/dev/null; }


repo_state () {
    # Returns repo state as string
    # First argument: git directory
    local GIT_DIR
    # Taking care to match git error code
    GIT_DIR=$(get_git_dir) || error "$?" "Target '$TARGET' is not a git repo (anymore??)"
	if [[ -f "$GIT_DIR/rebase-merge/interactive" ]]; then
		echo "REBASE-i"
	elif [[ -d "$GIT_DIR/rebase-merge" ]]; then
		echo "REBASE-m"
	else
		if [[ -d "$GIT_DIR/rebase-apply" ]]; then
			echo "AM/REBASE"
		elif [[ -f "$GIT_DIR/MERGE_HEAD" ]]; then
			echo "MERGING"
		elif [[ -f "$GIT_DIR/CHERRY_PICK_HEAD" ]]; then
			echo "CHERRY-PICKING"
		elif [[ -f "$GIT_DIR/BISECT_LOG" ]]; then
			echo "BISECTING"
		fi
	fi
	if [[ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]]; then
		if [[ "true" = "$(git rev-parse --is-bare-repository 2>/dev/null)" ]]; then
			echo "|BARE"
		else
			echo "|GIT_DIR"
		fi
	elif [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
		git diff --no-ext-diff --quiet --exit-code || echo "|DIRTY"
	fi
}



####### Main ########

if [[ $SYSTEM = "Darwin" ]]; then
    command -v gtimeout >/dev/null || error_nowarn 1 "Please install coreutils."
    command -v fswatch >/dev/null || error_nowarn 1 "Please install fswatch."
fi

[[ $# -eq 1 ]] || error_nowarn 1 "Need exactly 1 argument: directory to monitor"
declare -r TARGET="$1"
[[ -d $TARGET ]] || error 1 "Target '$TARGET' is not a directory."

cd "$TARGET" || error 2 "Cannot move into target dir '$TARGET'"
get_git_dir || error 2 "Target '$TARGET' is not a git repo"

msg "Syncing $PWD"
git-sync

while true; do
	changedFile=$(wait_for_change 2>/dev/null)
	if [[ -z "$changedFile" ]];	then
		git-sync
	else
		echo "Syncing for: $changedFile"
		{ git check-ignore "$changedFile" > /dev/null; } || git-sync
	fi
done
