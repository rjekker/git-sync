#!/usr/bin/env bash

# Git Monitor
# Based on git-sync by Simon Thum (Add URL here)
# And the following:
# Took this from: https://github.com/ivanmalison/dotfiles/blob/3a0c142760a930fd41441a645d78ec2a83bf7811/dotfiles/lib/bin/git_sync_directory.sh#L8
# But the fswatch part from: https://github.com/gitwatch/gitwatch/blob/master/gitwatch.sh
# TODO add my own license

# Requirements: bash; git; coreutils and fswatch on Mac OS

TIMEOUT=60
PULL_PERIOD=5 # Number of times we wait for something to change locally before we try to pull
SYSTEM="$(uname)"

msg() # log message with date
{
    printf "git-monitor (%s): %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$*"
}


warn()
{
    # log message and show it as a system notification
    msg "$*"
    if [[ $SYSTEM = Darwin ]]; then
        osascript -e "display notification \"git-monitor: $*\"" 2> /dev/null
    else
        notify-send "git-monitor: $*" 2> /dev/null
    fi
}


error() {
    # Log an error and exit
    # First argument: error code
    # All others are logged
    retval="$1"
    shift
    warn "Error: $*"
    printf "git-monitor error: %s\n" "$*" >&2; exit "$retval";
}


wait_for_change() {
    if [[ $SYSTEM != "Darwin" ]]; then
        # Note: we timeout after 60s because we want to pull if possible
        inotifywait . -r -e modify,move,create,delete --format "%w%f" --exclude "\.git" -t "$TIMEOUT"
    else
        # default events specified via a mask, see
        # https://emcrisostomo.github.io/fswatch/doc/1.14.0/fswatch.html/Invoking-fswatch.html#Numeric-Event-Flags
        # default of 414 = MovedTo + MovedFrom + Renamed + Removed + Updated + Created
        #                = 256 + 128+ 16 + 8 + 4 + 2
        gtimeout "$TIMEOUT" fswatch --recursive --event=414 --exclude "\.git"  -1 .
    fi
}


####### Main ########

[[ $# -eq 1 ]] || error 1 "Need exactly 1 argument: directory to monitor"
[[ -d $1 ]] || error 1 "Target '$1' is not a directory."


if [[ $SYSTEM = "Darwin" ]]; then
    command -v gtimeout || error 1 "Please install coreutils."
    command -v fswatch || error 1 "Please install fswatch."
fi

msg "Syncing $1"
cd "$1" || error 2 "Cannot move into target dir '$1'"

counter=0
while true; do
	changedFile=$(wait_for_change 2>/dev/null)
	if [[ -z "$changedFile" ]];	then
		counter=$((counter+1))
		if [[ $counter -gt $PULL_PERIOD ]]; then
			git-sync
			counter=0
		else
			git-sync > /dev/null
		fi
	else
		echo "Syncing for: $changedFile"
		{ git check-ignore "$changedFile" > /dev/null; } || git-sync
	fi
done
